import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  CircularProgress,
  Snackbar,
  Alert,
} from '@mui/material';
import { PlayArrow as StartIcon, Stop as StopIcon } from '@mui/icons-material';
import AlertBar from '../components/AlertBar';

interface ScanResult {
  port: number;
  address: string;
  status: string;
  service: string;
  version: string;
}

interface VulnerabilityAlert {
  id: string;
  title: string;
  message: string;
  severity: 'error' | 'warning' | 'info' | 'success';
  timestamp: string;
}

export default function VulnerabilityScanner() {
  const [target, setTarget] = useState('');
  const [portRange, setPortRange] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState<ScanResult[]>([]);
  const [alerts, setAlerts] = useState<VulnerabilityAlert[]>([]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');

  const handleStartScan = async () => {
    if (!target || !portRange) {
      setSnackbarMessage('Please provide both target and port range.');
      setSnackbarOpen(true);
      return;
    }

    setIsScanning(true);

    try {
      const response = await axios.post('http://localhost:4444/api/v1/scan/service', {
        port_range: portRange,
        address: target,
      });

      const serverResults: ScanResult[] = parseAPIResponse(response.data);
      setResults(serverResults);

      const newAlerts = serverResults
        .filter((result: ScanResult) => result.status === 'open')
        .map((result: ScanResult) => ({
          id: Date.now().toString(),
          title: `Open Port Detected: [${result.port}]`,
          message: `Service named: [${result.service.toUpperCase()}] is open on address: ${result.address}`,
          severity: 'warning',
          timestamp: new Date().toISOString(),
        }));

      setAlerts((prev: any) => [...prev, ...newAlerts]);
    } catch (error) {
      console.error('API Error:', error);
      setSnackbarMessage('Failed to fetch scan results. Please try again.');
      setSnackbarOpen(true);
    } finally {
      setIsScanning(false);
    }
  };

  function parseAPIResponse(docs: any[]): ScanResult[] {
    const parsed: ScanResult[] = [];
    for (const doc of docs) {
      const newDoc = {
        address: doc.Addr,
        port: doc.Port,
        status: doc.Status,
        service: doc.Service,
        version: doc.Version,
      } as ScanResult;

      parsed.push(newDoc);
    }

    return parsed;
  }

  const handleStopScan = () => {
    setIsScanning(false);
  };

  const handleTakeAction = (alertId: string) => {
    setSnackbarMessage('Initiating vulnerability mitigation...');
    setSnackbarOpen(true);
    setAlerts(alerts.filter((alert) => alert.id !== alertId));
  };

  const handleMarkBenign = (alertId: string) => {
    setSnackbarMessage('Vulnerability marked as false positive');
    setSnackbarOpen(true);
    setAlerts(alerts.filter((alert) => alert.id !== alertId));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'info';
      default:
        return 'default';
    }
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      <Box sx={{ mb: 3 }}>
        {alerts.map((alert) => (
          <AlertBar
            key={alert.id}
            severity={alert.severity}
            title={alert.title}
            message={alert.message}
            priority="high"
            timestamp={alert.timestamp}
            details={{
              source: 'Network Scanner',
              affectedSystem: 'Web Server',
              recommendedAction: 'Review server logs and block suspicious IP',
            }}
            onTakeAction={() => handleTakeAction(alert.id)}
            onMarkBenign={() => handleMarkBenign(alert.id)}
          />
        ))}
      </Box>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Typography variant="h6" gutterBottom>
            Detect Running Services
          </Typography>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Scan Configuration
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Target IP/Hostname"
                  value={target}
                  onChange={(e) => setTarget(e.target.value)}
                  disabled={isScanning}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Port Range (e.g., 1-1024)"
                  value={portRange}
                  onChange={(e) => setPortRange(e.target.value)}
                  disabled={isScanning}
                />
              </Grid>
              <Grid item xs={12}>
                <Button
                  variant="contained"
                  color={isScanning ? 'error' : 'primary'}
                  startIcon={isScanning ? <StopIcon /> : <StartIcon />}
                  onClick={isScanning ? handleStopScan : handleStartScan}
                  sx={{ mr: 2 }}
                >
                  {isScanning ? 'Stop Scan' : 'Start Scan'}
                </Button>
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* Scan Results */}
        <Grid item xs={12}>
          <Paper sx={{ p: 3 }}>
            {isScanning ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                <CircularProgress />
              </Box>
            ) : results.length >= 1 ? (
              <TableContainer>
                <Typography variant="h6" gutterBottom>
                  Scan Results
                </Typography>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Address</TableCell>
                      <TableCell>Port</TableCell>
                      <TableCell>Service</TableCell>
                      <TableCell>Status</TableCell>
                      <TableCell>Version</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {results.map((result, index) => (
                      <TableRow key={index}>
                        <TableCell>{result.address}</TableCell>
                        <TableCell>{result.port}</TableCell>
                        <TableCell>{result.service}</TableCell>
                        <TableCell>{result.status}</TableCell>
                        <TableCell>{result.version}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            ) : <Grid item xs={12}>
              {!results.length && (
                <Alert severity="info">
                  Please provide an IP address and port range to start the scan.
                </Alert>
              )}
            </Grid>}
          </Paper>
        </Grid>
      </Grid>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
      />
    </Box>
  );
}