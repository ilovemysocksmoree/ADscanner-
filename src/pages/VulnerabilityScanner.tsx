import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  CircularProgress,
  Snackbar,
  Alert,
  Collapse,
  IconButton,
  Link,
} from '@mui/material';
import { PlayArrow as StartIcon, Stop as StopIcon } from '@mui/icons-material';
import AlertBar from '../components/AlertBar';
import { useAuth } from '../contexts/AuthContext';
import { loggingService } from '../services/LoggingService';
import { NistVulnerabilityService } from '../services/NistVulnerabilityService';

interface ScanResult {
  port: number;
  address: string;
  status: string;
  service: string;
  version: string;
  vulnerabilities?: {
    id: string;
    description: string;
    cvssV3Score?: number;
    cvssV3Severity?: string;
    references: string[];
    publishedDate: string;
  }[];
}

interface VulnerabilityAlert {
  id: string;
  title: string;
  message: string;
  severity: 'error' | 'warning' | 'info' | 'success';
  timestamp: string;
  cveId?: string;
  references?: string[];
}

export default function VulnerabilityScanner() {
  const { user } = useAuth();
  const [target, setTarget] = useState('');
  const [portRange, setPortRange] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState<ScanResult[]>([]);
  const [alerts, setAlerts] = useState<VulnerabilityAlert[]>([]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');

  const handleStartScan = async () => {
    if (!target || !portRange) {
      setSnackbarMessage('Please enter both target and port range');
      setSnackbarOpen(true);
      return;
    }

    setIsScanning(true);
    setResults([]);
    setAlerts([]);

    try {
      loggingService.addLog(
        user,
        'START_VULNERABILITY_SCAN',
        `Started vulnerability scan on target: ${target}, port range: ${portRange}`,
        '/vulnerability-scanner'
      );

      console.log('Sending scan request:', {
        url: 'http://127.0.0.1:4444/api/v1/scan/service',
        data: { port_range: portRange, address: target }
      });

      const serverResults = await axios.post('http://127.0.0.1:4444/api/v1/scan/service', 
        {
          port_range: portRange,
          address: target
        },
        {
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }
        }
      );

      console.log('Received response:', serverResults.data);
      const parsedResults = parseAPIResponse(serverResults.data);
      
      // Check each service for vulnerabilities
      const resultsWithVulnerabilities = await Promise.all(
        parsedResults.map(async (result) => {
          if (result.service && result.version) {
            console.log(`Checking vulnerabilities for service: ${result.service} version: ${result.version}`);
            try {
              const vulnerabilities = await NistVulnerabilityService.checkServiceVulnerabilities(
                result.service,
                result.version
              );
              console.log('Found vulnerabilities:', vulnerabilities);
              if (vulnerabilities.length > 0) {
                return { ...result, vulnerabilities };
              }
            } catch (error) {
              console.error('Error checking vulnerabilities:', error);
            }
          }
          return result;
        })
      );

      console.log('Results with vulnerabilities:', resultsWithVulnerabilities);
      setResults(resultsWithVulnerabilities);

      // Generate alerts for vulnerable services
      const newAlerts = resultsWithVulnerabilities.flatMap(result => 
        (result.vulnerabilities || []).map(vuln => ({
          id: `${result.service}-${vuln.id}`,
          title: `Vulnerability found in ${result.service} ${result.version}`,
          message: vuln.description,
          severity: NistVulnerabilityService.getSeverityLevel(vuln.cvssV3Score),
          timestamp: new Date().toISOString(),
          cveId: vuln.id,
          references: vuln.references
        }))
      );

      console.log('Generated alerts:', newAlerts);
      if (newAlerts.length > 0) {
        setAlerts(prevAlerts => [...prevAlerts, ...newAlerts]);
      }

      loggingService.addLog(
        user,
        'VULNERABILITY_SCAN_COMPLETE',
        `Completed vulnerability scan on ${target}. Found ${parsedResults.length} results, ${newAlerts.length} alerts`,
        '/vulnerability-scanner'
      );
    } catch (error: any) {
      console.error('Scan error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      const errorMessage = error.response?.data?.message || error.message || 'Error during scan';
      setSnackbarMessage(`Scan failed: ${errorMessage}`);
      setSnackbarOpen(true);
      
      loggingService.addLog(
        user,
        'VULNERABILITY_SCAN_ERROR',
        `Error during vulnerability scan on ${target}: ${errorMessage}`,
        '/vulnerability-scanner'
      );
    } finally {
      setIsScanning(false);
    }
  };

  function parseAPIResponse(data: any[]): ScanResult[] {
    console.log('Parsing API response:', data);
    const parsed: ScanResult[] = [];
    for (const doc of data) {
      const newDoc = {
        address: doc.Address || doc.address,
        port: doc.Port || doc.port,
        status: doc.Status || doc.status || 'open',
        service: doc.Service || doc.service || doc.ServiceName || '',
        version: doc.Version || doc.version || doc.ServiceVersion || '',
      } as ScanResult;

      console.log('Parsed service:', newDoc);
      parsed.push(newDoc);
    }
    return parsed;
  }

  const handleStopScan = () => {
    setIsScanning(false);
    loggingService.addLog(
      user,
      'STOP_VULNERABILITY_SCAN',
      `Stopped vulnerability scan on target: ${target}`,
      '/vulnerability-scanner'
    );
  };

  const handleTakeAction = (alertId: string) => {
    const alert = alerts.find(a => a.id === alertId);
    setSnackbarMessage('Initiating vulnerability mitigation...');
    setSnackbarOpen(true);
    setAlerts(alerts.filter((alert) => alert.id !== alertId));
    
    loggingService.addLog(
      user,
      'VULNERABILITY_ACTION_TAKEN',
      `Took action on vulnerability alert: ${alert?.title}`,
      '/vulnerability-scanner'
    );
  };

  const handleMarkBenign = (alertId: string) => {
    const alert = alerts.find(a => a.id === alertId);
    setSnackbarMessage('Vulnerability marked as false positive');
    setSnackbarOpen(true);
    setAlerts(alerts.filter((alert) => alert.id !== alertId));
    
    loggingService.addLog(
      user,
      'VULNERABILITY_MARKED_BENIGN',
      `Marked vulnerability as benign: ${alert?.title}`,
      '/vulnerability-scanner'
    );
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'info';
      default:
        return 'default';
    }
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      <Box sx={{ mb: 3 }}>
        {alerts.map((alert) => (
          <AlertBar
            key={alert.id}
            severity={alert.severity}
            title={alert.title}
            message={alert.message}
            priority="high"
            timestamp={alert.timestamp}
            details={{
              source: 'Network Scanner',
              affectedSystem: 'Web Server',
              recommendedAction: 'Review server logs and block suspicious IP',
            }}
            onTakeAction={() => handleTakeAction(alert.id)}
            onMarkBenign={() => handleMarkBenign(alert.id)}
          />
        ))}
      </Box>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Typography variant="h6" gutterBottom>
            Detect Running Services
          </Typography>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Scan Configuration
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Target IP/Hostname"
                  value={target}
                  onChange={(e) => setTarget(e.target.value)}
                  disabled={isScanning}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Port Range (e.g., 1-1024)"
                  value={portRange}
                  onChange={(e) => setPortRange(e.target.value)}
                  disabled={isScanning}
                />
              </Grid>
              <Grid item xs={12}>
                <Button
                  variant="contained"
                  color={isScanning ? 'error' : 'primary'}
                  startIcon={isScanning ? <StopIcon /> : <StartIcon />}
                  onClick={isScanning ? handleStopScan : handleStartScan}
                  sx={{ mr: 2 }}
                >
                  {isScanning ? 'Stop Scan' : 'Start Scan'}
                </Button>
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* Scan Results */}
        <Grid item xs={12}>
          <Paper sx={{ p: 3 }}>
            {isScanning ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                <CircularProgress />
              </Box>
            ) : results.length >= 1 ? (
              <TableContainer component={Paper} sx={{ mt: 3 }}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Port</TableCell>
                      <TableCell>Address</TableCell>
                      <TableCell>Service</TableCell>
                      <TableCell>Version</TableCell>
                      <TableCell>Status</TableCell>
                      <TableCell>Vulnerabilities</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {results.map((result, index) => (
                      <React.Fragment key={`${result.address}:${result.port}`}>
                        <TableRow>
                          <TableCell>{result.port}</TableCell>
                          <TableCell>{result.address}</TableCell>
                          <TableCell>{result.service}</TableCell>
                          <TableCell>{result.version}</TableCell>
                          <TableCell>
                            <Chip
                              label={result.status}
                              color={result.status === 'open' ? 'error' : 'success'}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                            {result.vulnerabilities && result.vulnerabilities.length > 0 && (
                              <Chip
                                label={`${result.vulnerabilities.length} found`}
                                color="warning"
                                size="small"
                              />
                            )}
                          </TableCell>
                        </TableRow>
                        {result.vulnerabilities && result.vulnerabilities.length > 0 && (
                          <TableRow>
                            <TableCell colSpan={6}>
                              <Box sx={{ pl: 2 }}>
                                {result.vulnerabilities.map((vuln) => (
                                  <Box key={vuln.id} sx={{ mb: 2 }}>
                                    <Typography variant="subtitle2" color="error">
                                      {vuln.id} - CVSS Score: {vuln.cvssV3Score} ({vuln.cvssV3Severity})
                                    </Typography>
                                    <Typography variant="body2">{vuln.description}</Typography>
                                    {vuln.references.length > 0 && (
                                      <Box sx={{ mt: 1 }}>
                                        <Typography variant="caption">References:</Typography>
                                        {vuln.references.map((ref, idx) => (
                                          <Link
                                            key={idx}
                                            href={ref}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            display="block"
                                            sx={{ ml: 2 }}
                                          >
                                            {ref}
                                          </Link>
                                        ))}
                                      </Box>
                                    )}
                                  </Box>
                                ))}
                              </Box>
                            </TableCell>
                          </TableRow>
                        )}
                      </React.Fragment>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            ) : <Grid item xs={12}>
              {!results.length && (
                <Alert severity="info">
                  Please provide an IP address and port range to start the scan.
                </Alert>
              )}
            </Grid>}
          </Paper>
        </Grid>
      </Grid>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
      />
    </Box>
  );
}