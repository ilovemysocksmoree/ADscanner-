import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  CircularProgress,
  Snackbar,
} from '@mui/material';
import { PlayArrow as StartIcon, Stop as StopIcon } from '@mui/icons-material';
import AlertBar from '../components/AlertBar';

interface ScanResult {
  port: number;
  service: string;
  vulnerability: string;
  severity: 'high' | 'medium' | 'low';
  details: string;
}

interface VulnerabilityAlert {
  id: string;
  title: string;
  message: string;
  severity: 'error' | 'warning' | 'info' | 'success';
  timestamp: string;
}

const mockResults: ScanResult[] = [
  {
    port: 80,
    service: 'HTTP',
    vulnerability: 'Outdated Apache Version',
    severity: 'high',
    details: 'Running Apache 2.2.3 with known vulnerabilities',
  },
  {
    port: 443,
    service: 'HTTPS',
    vulnerability: 'Weak SSL Configuration',
    severity: 'medium',
    details: 'TLS 1.0 enabled',
  },
  {
    port: 22,
    service: 'SSH',
    vulnerability: 'Weak Cipher Support',
    severity: 'low',
    details: 'Supports deprecated ciphers',
  },
];

const mockVulnerabilityAlerts: VulnerabilityAlert[] = [
  {
    id: '1',
    title: 'Critical Vulnerability Found',
    message: 'Remote Code Execution vulnerability detected in Apache service on port 80',
    severity: 'error',
    timestamp: new Date().toISOString(),
  },
  {
    id: '2',
    title: 'Outdated SSL Configuration',
    message: 'Weak cipher suites detected on HTTPS service (port 443)',
    severity: 'warning',
    timestamp: new Date().toISOString(),
  },
];

export default function VulnerabilityScanner() {
  const [target, setTarget] = useState('');
  const [portRange, setPortRange] = useState('1-1024');
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState<ScanResult[]>([]);
  const [alerts, setAlerts] = useState<VulnerabilityAlert[]>(mockVulnerabilityAlerts);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');

  const handleStartScan = () => {
    setIsScanning(true);
    // Simulate scan
    setTimeout(() => {
      setResults(mockResults);
      setIsScanning(false);
      // Simulate finding new vulnerability
      const newAlert: VulnerabilityAlert = {
        id: Date.now().toString(),
        title: 'New Vulnerability Detected',
        message: `Potential security issue found on ${target}`,
        severity: 'warning',
        timestamp: new Date().toISOString(),
      };
      setAlerts(prev => [...prev, newAlert]);
    }, 3000);
  };

  const handleStopScan = () => {
    setIsScanning(false);
  };

  const handleTakeAction = (alertId: string) => {
    setSnackbarMessage('Initiating vulnerability mitigation...');
    setSnackbarOpen(true);
    setAlerts(alerts.filter(alert => alert.id !== alertId));
  };

  const handleMarkBenign = (alertId: string) => {
    setSnackbarMessage('Vulnerability marked as false positive');
    setSnackbarOpen(true);
    setAlerts(alerts.filter(alert => alert.id !== alertId));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'info';
      default:
        return 'default';
    }
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      {/* Alerts Section */}
      <Box sx={{ mb: 3 }}>
        {alerts.map((alert) => (
          <AlertBar
            key={alert.id}
            severity={alert.severity}
            title={alert.title}
            message={alert.message}
            priority="high"
            timestamp={alert.timestamp}
            details={{
              source: "Network Scanner",
              affectedSystem: "Web Server",
              recommendedAction: "Review server logs and block suspicious IP"
            }}
            onTakeAction={() => handleTakeAction(alert.id)}
            onMarkBenign={() => handleMarkBenign(alert.id)}
          />
        ))}
      </Box>

      <Grid container spacing={3}>
        {/* Scan Configuration */}
        <Grid item xs={12}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Scan Configuration
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Target IP/Hostname"
                  value={target}
                  onChange={(e) => setTarget(e.target.value)}
                  disabled={isScanning}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Port Range (e.g., 1-1024)"
                  value={portRange}
                  onChange={(e) => setPortRange(e.target.value)}
                  disabled={isScanning}
                />
              </Grid>
              <Grid item xs={12}>
                <Button
                  variant="contained"
                  color={isScanning ? 'error' : 'primary'}
                  startIcon={isScanning ? <StopIcon /> : <StartIcon />}
                  onClick={isScanning ? handleStopScan : handleStartScan}
                  sx={{ mr: 2 }}
                >
                  {isScanning ? 'Stop Scan' : 'Start Scan'}
                </Button>
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* Scan Results */}
        <Grid item xs={12}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Scan Results
            </Typography>
            {isScanning ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                <CircularProgress />
              </Box>
            ) : (
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Port</TableCell>
                      <TableCell>Service</TableCell>
                      <TableCell>Vulnerability</TableCell>
                      <TableCell>Severity</TableCell>
                      <TableCell>Details</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {results.map((result, index) => (
                      <TableRow key={index}>
                        <TableCell>{result.port}</TableCell>
                        <TableCell>{result.service}</TableCell>
                        <TableCell>{result.vulnerability}</TableCell>
                        <TableCell>
                          <Chip
                            label={result.severity.toUpperCase()}
                            color={getSeverityColor(result.severity)}
                            size="small"
                          />
                        </TableCell>
                        <TableCell>{result.details}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </Paper>
        </Grid>
      </Grid>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
      />
    </Box>
  );
} 