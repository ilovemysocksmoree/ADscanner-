import React, { useState } from 'react';
import {
  Box,
  Typography,
  Grid,
  Snackbar,
} from '@mui/material';
import { useAuth } from '../contexts/AuthContext';
import { loggingService } from '../services/LoggingService';
import AlertBar from '../components/alerts/AlertBar';
import ScanConfig from '../components/vulnerabilities/ScanConfig';
import ScanResults from '../components/vulnerabilities/ScanResults';
import { VulnerabilityScanService } from '../services/api/vulnerabilityScanService';
import { NistVulnerabilityService } from '../services/api/nistVulnerabilityService';
import { ScanResult, VulnerabilityAlert, ScanConfig as ScanConfigType } from '../interfaces/vulnerabilityScanner';

export default function VulnerabilityScanner() {
  const { user } = useAuth();
  const [scanConfig, setScanConfig] = useState<ScanConfigType>({
    target: '',
    portRange: '',
  });
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState<ScanResult[]>([]);
  const [alerts, setAlerts] = useState<VulnerabilityAlert[]>([]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');

  const handleConfigChange = (field: keyof ScanConfigType, value: string) => {
    setScanConfig((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleStartScan = async () => {
    if (!scanConfig.target || !scanConfig.portRange) {
      setSnackbarMessage('Please enter both target and port range');
      setSnackbarOpen(true);
      return;
    }

    setIsScanning(true);
    setResults([]);
    setAlerts([]);

    try {
      loggingService.addLog(
        user,
        'START_VULNERABILITY_SCAN',
        `Started vulnerability scan on target: ${scanConfig.target}, port range: ${scanConfig.portRange}`,
        '/vulnerability-scanner'
      );

      const scanResults = await VulnerabilityScanService.scanTarget(scanConfig);
      setResults(scanResults);

      // Generate alerts for vulnerable services
      const newAlerts = scanResults.flatMap(result => 
        (result.vulnerabilities || []).map(vuln => ({
          id: `${result.service}-${vuln.id}`,
          title: `Vulnerability found in ${result.service} ${result.version}`,
          message: vuln.description,
          severity: NistVulnerabilityService.getSeverityLevel(vuln.cvssV3Score),
          timestamp: new Date().toISOString(),
          cveId: vuln.id,
          references: vuln.references
        }))
      );

      console.log('Generated alerts:', newAlerts);
      if (newAlerts.length > 0) {
        setAlerts(prevAlerts => [...prevAlerts, ...newAlerts]);
      }

      loggingService.addLog(
        user,
        'VULNERABILITY_SCAN_COMPLETE',
        `Completed vulnerability scan on ${scanConfig.target}. Found ${scanResults.length} results, ${newAlerts.length} alerts`,
        '/vulnerability-scanner'
      );
    } catch (error: any) {
      console.error('Scan error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      const errorMessage = error.response?.data?.message || error.message || 'Error during scan';
      setSnackbarMessage(`Scan failed: ${errorMessage}`);
      setSnackbarOpen(true);
      
      loggingService.addLog(
        user,
        'VULNERABILITY_SCAN_ERROR',
        `Error during vulnerability scan on ${scanConfig.target}: ${errorMessage}`,
        '/vulnerability-scanner'
      );
    } finally {
      setIsScanning(false);
    }
  };

  const handleStopScan = () => {
    setIsScanning(false);
    loggingService.addLog(
      user,
      'STOP_VULNERABILITY_SCAN',
      `Stopped vulnerability scan on target: ${scanConfig.target}`,
      '/vulnerability-scanner'
    );
  };

  const handleTakeAction = (alertId: string) => {
    const alert = alerts.find(a => a.id === alertId);
    setSnackbarMessage('Initiating vulnerability mitigation...');
    setSnackbarOpen(true);
    setAlerts(alerts.filter((alert) => alert.id !== alertId));
    
    loggingService.addLog(
      user,
      'VULNERABILITY_ACTION_TAKEN',
      `Took action on vulnerability alert: ${alert?.title}`,
      '/vulnerability-scanner'
    );
  };

  const handleMarkBenign = (alertId: string) => {
    const alert = alerts.find(a => a.id === alertId);
    setSnackbarMessage('Vulnerability marked as false positive');
    setSnackbarOpen(true);
    setAlerts(alerts.filter((alert) => alert.id !== alertId));
    
    loggingService.addLog(
      user,
      'VULNERABILITY_MARKED_BENIGN',
      `Marked vulnerability as benign: ${alert?.title}`,
      '/vulnerability-scanner'
    );
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      <Box sx={{ mb: 3 }}>
        {alerts.map((alert) => (
          <AlertBar
            key={alert.id}
            id={alert.id}
            severity={alert.severity}
            title={alert.title}
            message={alert.message}
            priority="high"
            timestamp={alert.timestamp}
            details={{
              source: 'Vulnerability Scanner',
              affectedSystem: 'Service',
              recommendedAction: 'Update to the latest version or apply patches',
              cveId: alert.cveId,
              references: alert.references?.join(', '),
            }}
            onTakeAction={handleTakeAction}
            onMarkBenign={handleMarkBenign}
          />
        ))}
      </Box>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Typography variant="h6" gutterBottom>
            Detect Running Services
          </Typography>
          <ScanConfig
            config={scanConfig}
            isScanning={isScanning}
            onConfigChange={handleConfigChange}
            onStartScan={handleStartScan}
            onStopScan={handleStopScan}
          />
        </Grid>

        {/* Scan Results */}
        <Grid item xs={12}>
          <ScanResults
            isScanning={isScanning}
            results={results}
          />
        </Grid>
      </Grid>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
      />
    </Box>
  );
}