import axios from 'axios';

interface NVDVulnerability {
    id: string;
    description: string;
    cvssV3Score?: number;
    cvssV3Severity?: string;
    references: string[];
    publishedDate: string;
}

const NIST_API_BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0';
// You should get your own API key from https://nvd.nist.gov/developers/request-an-api-key
const API_KEY = '';

export class NistVulnerabilityService {
    private static async searchVulnerabilities(keyword: string): Promise<NVDVulnerability[]> {
        try {
            console.log('Searching NIST database for:', keyword);
            const response = await axios.get(NIST_API_BASE_URL, {
                params: {
                    keywordSearch: keyword,
                    resultsPerPage: 20,
                    startIndex: 0
                },
                headers: {
                    'Accept': 'application/json',
                    ...(API_KEY && { 'apiKey': API_KEY })
                }
            });

            console.log('NIST API response:', response.data);

            if (!response.data.vulnerabilities) {
                console.log('No vulnerabilities found');
                return [];
            }

            const vulnerabilities = response.data.vulnerabilities.map((vuln: any) => ({
                id: vuln.cve.id,
                description: vuln.cve.descriptions.find((desc: any) => desc.lang === 'en')?.value || '',
                cvssV3Score: vuln.cve.metrics?.cvssMetricV3?.[0]?.cvssData?.baseScore,
                cvssV3Severity: vuln.cve.metrics?.cvssMetricV3?.[0]?.cvssData?.baseSeverity,
                references: vuln.cve.references?.map((ref: any) => ref.url) || [],
                publishedDate: vuln.cve.published
            }));

            console.log('Processed vulnerabilities:', vulnerabilities);
            return vulnerabilities;
        } catch (error) {
            console.error('Error fetching vulnerabilities:', error);
            return [];
        }
    }

    private static getServiceSearchTerms(serviceName: string, version: string): string[] {
        // Map common service names to their proper search terms
        const serviceMap: { [key: string]: string[] } = {
            'microsoft-ds': ['SMB', 'Windows SMB', 'Microsoft SMB'],
            'msrpc': ['MSRPC', 'Microsoft RPC', 'DCE/RPC'],
            'ssl/vmware-auth': ['VMware Authentication Daemon', 'VMware Auth Daemon'],
        };

        const baseTerms = serviceMap[serviceName] || [serviceName];
        const queries: string[] = [];

        // Generate different combinations of search terms
        for (const term of baseTerms) {
            queries.push(
                `${term} ${version}`,
                term,
                `${term} vulnerability`,
                version ? `${term} ${version} vulnerability` : `${term} vulnerability`
            );
        }

        return [...new Set(queries)]; // Remove duplicates
    }

    public static async checkServiceVulnerabilities(
        serviceName: string,
        version: string
    ): Promise<NVDVulnerability[]> {
        // Clean and normalize the service name and version
        const cleanServiceName = serviceName.toLowerCase().trim();
        const cleanVersion = version.toLowerCase().trim();
        
        // Get appropriate search terms for the service
        const searchQueries = this.getServiceSearchTerms(cleanServiceName, cleanVersion);

        console.log('Trying search queries:', searchQueries);

        // Search for vulnerabilities using all queries
        const allResults = await Promise.all(
            searchQueries.map(query => this.searchVulnerabilities(query))
        );

        // Combine and deduplicate results
        const combinedResults = Array.from(
            new Map(
                allResults.flat().map(item => [item.id, item])
            ).values()
        );

        console.log('Combined vulnerability results:', combinedResults);
        return combinedResults;
    }

    public static getSeverityLevel(cvssScore?: number): 'error' | 'warning' | 'info' | 'success' {
        if (!cvssScore) return 'info';
        if (cvssScore >= 9.0) return 'error';
        if (cvssScore >= 7.0) return 'warning';
        if (cvssScore >= 4.0) return 'info';
        return 'success';
    }
} 