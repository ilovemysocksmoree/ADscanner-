import axios from 'axios';
import { ScanConfig, ScanResult } from '../../interfaces/vulnerabilityScanner';
import { NistVulnerabilityService } from './nistVulnerabilityService';

const API_URL = 'http://127.0.0.1:4444/api/v1';

export class VulnerabilityScanService {
  /**
   * Performs a service scan on the specified target and port range
   */
  static async scanTarget(config: ScanConfig): Promise<ScanResult[]> {
    try {
      console.log('Sending scan request:', {
        url: `${API_URL}/scan/service`,
        data: { port_range: config.portRange, address: config.target }
      });

      const response = await axios.post(
        `${API_URL}/scan/service`, 
        {
          port_range: config.portRange,
          address: config.target
        },
        {
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }
        }
      );

      console.log('Received response:', response.data);
      const parsedResults = this.parseAPIResponse(response.data);
      
      // Check each service for vulnerabilities
      const resultsWithVulnerabilities = await Promise.all(
        parsedResults.map(async (result) => {
          if (result.service && result.version) {
            console.log(`Checking vulnerabilities for service: ${result.service} version: ${result.version}`);
            try {
              const vulnerabilities = await NistVulnerabilityService.checkServiceVulnerabilities(
                result.service,
                result.version
              );
              console.log('Found vulnerabilities:', vulnerabilities);
              if (vulnerabilities.length > 0) {
                return { ...result, vulnerabilities };
              }
            } catch (error) {
              console.error('Error checking vulnerabilities:', error);
            }
          }
          return result;
        })
      );

      console.log('Results with vulnerabilities:', resultsWithVulnerabilities);
      return resultsWithVulnerabilities;
    } catch (error) {
      console.error('Scan error:', error);
      throw error;
    }
  }

  /**
   * Parses the API response into a consistent format
   */
  private static parseAPIResponse(data: any[]): ScanResult[] {
    console.log('Parsing API response:', data);
    const parsed: ScanResult[] = [];
    for (const doc of data) {
      const newDoc = {
        address: doc.Address || doc.address,
        port: doc.Port || doc.port,
        status: doc.Status || doc.status || 'open',
        service: doc.Service || doc.service || doc.ServiceName || '',
        version: doc.Version || doc.version || doc.ServiceVersion || '',
      } as ScanResult;

      console.log('Parsed service:', newDoc);
      parsed.push(newDoc);
    }
    return parsed;
  }
} 